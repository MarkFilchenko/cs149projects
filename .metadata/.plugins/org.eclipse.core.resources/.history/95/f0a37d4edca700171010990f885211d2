import java.util.*;

public class ShortestRemainingTime {

	private static final int totalJobs = 30;
	
	//Will help to calculate average runtime
    public float totalResponseTime = 0.0f;
	int timer = 0;
	
	/**
	 * Method gets called to take the queue of jobs in cpu
	 * and increment the waiting time of the jobs waiting
	 * @param q entire jobs seen by cpu that haven't finished
	 */
	private void incrementWaitingJobs(PriorityQueue<Job> q){
		ArrayList<Job> dummyList = new ArrayList<Job>(q);
		dummyList.remove(0);
		for(Job j: dummyList)
			j.incWaitingTime();
	}
	/**
	 * Meat and Bones
	 * 
	 * @param queue jobs sorted by arrival time
	 * @return queue after scheduling algorithm has ran
	 */
	private Queue<Job> processJobs(PriorityQueue<Job> queue){
		
		//Create dummy queue. Sorted by arrivalTime
		//Create empty queue to return
		//Create empty queue that sorts by remaining time**
		PriorityQueue<Job> dummyQ = new PriorityQueue<>(queue);
		Queue<Job> newQueue = new LinkedList<Job>();
		PriorityQueue<Job> jobsWorking = new PriorityQueue<Job>(Job.compareByRemainingTime);
		
		//Sets up the ability to get the average response time
        for (Job single_job : dummyQ)
            totalResponseTime += single_job.getExpectedRunTime();
             
		//timer goes to the time the first job is seen
		timer = (int)queue.peek().getArrivalTime();
		
		//simplification
		Job jobFinishing;
		Job jobAdding;
		
		//loops while timer is under 100 quanta or if a job
		//entered cpu and hasn't finished
		//if there are any jobs seen by the cpu, process it 
		//and increment the waiting time on any other jobs 
		//if the job is complete, set the endtime and move 
		//the job from dummyQ to the queue to return
		
		//if dummyQ has another element and the new element has
		//been seen by cpu
		//remove from dummyQ add to working jobs and set start time
		while(timer  < 100 || jobsWorking.peek() != null){
			if(jobsWorking.size() != 0){
				incrementWaitingJobs(jobsWorking);
				jobsWorking.peek().doJob();
				if(jobsWorking.peek().isComplete()){
					jobFinishing = jobsWorking.poll();
					jobFinishing.setEndTime(timer);
					jobFinishing.setTurnAroundTime(jobFinishing.getTurnAroundTime() + jobFinishing.getWaitingTime());
					dummyQ.remove(jobFinishing);
					newQueue.add(jobFinishing);
				}
			}
			if(dummyQ.peek() != null && (int)dummyQ.peek().getArrivalTime() <= timer){
				jobAdding = dummyQ.poll();
				jobAdding.setStartTime(timer);
				jobsWorking.add(jobAdding);
			}
			timer++;
		};
		
		return newQueue;

	}
	public static void printJobData(Queue<Job> list)
    {
		ArrayList<Job> some_job_list = new ArrayList<Job>(list);
		some_job_list.sort(Job.compareByArrivalTime);
        System.out.println("-----------------------------------------------------------------------------");

        System.out.printf("%-15s%-15s%-15s%-15s%-15s%-15s\n",
                "Job Name", "Arrival", "Priority", "Response Time", "Waiting Time", "Turn Around Time");

        for (Job job : some_job_list)
        {
            System.out.printf("%-15s%-15s%-15s%-15s%-15s%-15s\n",
                    job.getName(),
                    job.getArrivalTime(),
                    job.getPriority(),
                    job.getExpectedRunTime(),
                    job.getWaitingTime(),
                    job.getTurnAroundTime()
                    );
        }

        System.out.println("-----------------------------------------------------------------------------");
    }

    public static void printAggregatedStatistics(Queue<Job> completedJobs, float totalResponseTime)
    {
        float avgWait;
        float avgTurnAround;
        float avgResponse;

        float totalWait = 0.0f;
        float totalTurnAround = 0.0f;

        for (Job j : completedJobs)
        {
            totalWait += j.getWaitingTime();
            totalTurnAround += j.getTurnAroundTime();
        }

        //amount of time a process has been waiting in the ready queue
        avgWait = totalWait / totalJobs;

        // amount of time to execute a particular process
        avgTurnAround = totalTurnAround / totalJobs;

        //amount of time from when a request was submitted until the first response is produced
        avgResponse = totalResponseTime / totalJobs;

        System.out.println("Total Jobs Completed: " + completedJobs.size());
        System.out.println("Average Wait Time: " + avgWait);
        System.out.println("Average Turn Around: " + avgTurnAround);
        System.out.println("Average Response Time: "+ avgResponse);

        System.out.println("-----------------------------------------------------------------------------");
    }

	public static void main(String[] args){
		
		PriorityQueue<Job> arg = Job.JOBS();
		System.out.println("--------------SHORTEST TIME REMAINING--------------");
		System.out.println("QUEUE OF JOBS BEFORE EXECUTING SCHEDULING ALGORITHM: (SORTED BY ARRIVAL)");

	    printJobData(arg);

	    System.out.println("QUEUE OF JOBS AFTER EXECUTING SCHEDULING ALGORITHM");

		ShortestRemainingTime str = new ShortestRemainingTime();
		
		Queue<Job> q = str.processJobs(arg);
		printJobData(q);
		printAggregatedStatistics(q, str.totalResponseTime);
		
		
		
	}

}