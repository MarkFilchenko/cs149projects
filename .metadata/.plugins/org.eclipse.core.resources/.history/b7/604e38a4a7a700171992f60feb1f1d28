import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Random;

/**
 * This class contains all the information for a job and algorithm statistics
 * @author josh
 *
 */
public class Job{
	private final float arrivalTime;
	private float expectedRunTime;
	private int priority;
	private String name;

	private float timeLeft = 0;
	private float turnaroundTime = 0;
	private float waitingTime= 0 ;
	
	private int startTime = 0;
	private int endTime = 0;
	
	public static final float expected_total_runtime_min = 0.1f;
    public static final float expected_total_runtime_max = 10.0f;
    
    /**
     * Constructor
     * @param arrivalTime time job enters cpu
     * @param expectedRunTime
     * @param priority
     * @param name job name
     */
	public Job(float arrivalTime, float expectedRunTime, int priority, String name){
		this.arrivalTime = arrivalTime;
		this.expectedRunTime = expectedRunTime;
		this.priority = priority;
		this.name = name;
		this.timeLeft = expectedRunTime;
	}

	public static Comparator<Job> compareByArrivalTime = new Comparator<Job>(){
		@Override
		public int compare(Job o1, Job o2) {
			// TODO Auto-generated method stub

			float oneComparison = o1.arrivalTime;
			float twoComparison = o2.arrivalTime;

			if(oneComparison < twoComparison)
				return -1;
			if(oneComparison > twoComparison)
				return 1;
			return 0;
		}
	};
	public static Comparator<Job> compareByRemainingTime = new Comparator<Job>(){
		@Override
		public int compare(Job o1, Job o2) {
			// TODO Auto-generated method stub
			float oneComparison = o1.getTimeLeft();
			float twoComparison = o2.getTimeLeft();

			if(oneComparison < twoComparison)
				return -1;
			if(oneComparison > twoComparison)
				return 1;
			return 0;
		}

	};
	/**
	 * Randomly generate 30 jobs
	 * @return priority queue of 30 jobs
	 */
	public static PriorityQueue<Job> JOBS(){
		PriorityQueue<Job> jobs = new PriorityQueue<>(compareByArrivalTime);
		Random r = new Random();
		
		for(int i = 0 ; i < 30; i++){
			Job single_job = new Job(0 + r.nextFloat()*(100 - 0),
					         0 + r.nextFloat()*(10-0), 
					         r.nextInt((4 - 1) + 1) +1, 
					         Integer.toString(i));
			jobs.add(single_job);
			single_job.setExpectedRunTime(r.nextFloat()
                    * (expected_total_runtime_max - expected_total_runtime_min)
                    + expected_total_runtime_min);
			single_job.setTurnAroundTime(single_job.getExpectedRunTime());
			single_job.setTimeLeft(single_job.getExpectedRunTime());

		}
		return jobs;	
	}
	/**
	 * sets the turnaround time for the job
	 * @param f the amount to set the turnaround time
	 */
	public void setTurnAroundTime(float f){
		turnaroundTime = f;
	}
	/**
	 * Sets the priority of the job
	 * @param priorityNum priority to set
	 */
	private void setPriority(int priorityNum) {
		// TODO Auto-generated method stub
		priority = priorityNum;
		
	}
	/**
	 * Sets the job name
	 * @param string name to set
	 */
	private void setJobName(String string) {
		// TODO Auto-generated method stub
		name = string;
		
	}
	/**
	 * Subtracts one quanta from the jobs remaining time
	 */
	public void doJob(){
		timeLeft -= 1;

	}
	/**
	 * Job is complete or not
	 * @return if job still has time left to complete
	 */
	public boolean isComplete(){
		return timeLeft < 0;
	}
	/**
	 * The time left in job
	 * @return time left to complete
	 */
	public float getTimeLeft(){
		return timeLeft;
	}
	/**
	 * Amount of quanta to complete job
	 * @return the initial run time
	 */
	public float getExpectedRunTime(){
		return expectedRunTime;
	}
	/**
	 * The time this job enterred the cpu
	 * @return the start time
	 */
	public int getStartTime(){
		return startTime;
	}
	/**
	 * The end time of this job
	 * @return the end time
	 */
	public int getEndTime(){
		return endTime;
	}
	/**
	 * sets the start time of this job
	 * @param time to set as start
	 */
	public void setStartTime(int time){
		startTime = time;
	}
	/**
	 * sets the end time of this job
	 * @param time to time to set as the end
	 */
	public void setEndTime(int time){
		endTime = time;
	}
	/**
	 * the name of this job
	 * @return the name
	 */
	public String getName(){
		return name;
	}
	/**
	 * arrival time of this job
	 * @return the time
	 */
	public float getArrivalTime(){
		return arrivalTime;
	}
	/**
	 * priority number of this job
	 * @return the priority number
	 */
	public int getPriority(){
		return priority;
	}
	/**
	 * Waiting time of this job
	 * @return the total waiting time
	 */
	public float getWaitingTime(){
		return waitingTime;
	}
	/**
	 * Turn around time of this job
	 * @return the turnaround time
	 */
	public float getTurnAroundTime(){
		return turnaroundTime;
	}
	/**
	 * Set the expected runtime of this job
	 * @param f time to set 
	 */
	public void setExpectedRunTime(float f){
		expectedRunTime = f;
	}
	/**
	 * Sets the time left in this job
	 * @param f time to set
	 */
	public void setTimeLeft(Float f){
		timeLeft = f;
	}
	
	/**
	 * add a quanta to this jobs wating time
	 */
	public void incWaitingTime(){
		waitingTime +=1;
	}
	
}